name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Unit Tests and Linting
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run linting
      run: npm run lint
    
    - name: Run unit tests
      run: npm run test:unit
    
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results/
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let coverage = 'No coverage data available';
          
          try {
            if (fs.existsSync('./coverage/lcov-report/index.html')) {
              const coverageData = fs.readFileSync('./coverage/coverage-summary.json', 'utf8');
              const parsed = JSON.parse(coverageData);
              const total = parsed.total;
              coverage = `üìä **Test Coverage**: ${total.lines.pct}% lines, ${total.statements.pct}% statements, ${total.functions.pct}% functions, ${total.branches.pct}% branches`;
            }
          } catch (e) {
            console.log('Could not read coverage data:', e);
          }
          
          const comment = `## üß™ Test Results
          
          ‚úÖ **Unit Tests**: Passed
          ‚úÖ **Linting**: Passed  
          ‚úÖ **Type Checking**: Passed
          
          ${coverage}
          
          ---
          *Tests run on Node.js ${{ matrix.node-version }}*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # E2E Tests
  e2e:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
    
    - name: Start application
      run: npm start &
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
    
    - name: Wait for application to start
      run: npx wait-on http://localhost:3000
    
    - name: Run E2E tests
      run: npx playwright test --reporter=junit
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3000
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/
          playwright-report/
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
    
    - name: Comment PR with E2E results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let e2eResults = 'No E2E test results available';
          
          try {
            if (fs.existsSync('./test-results/results.xml')) {
              const results = fs.readFileSync('./test-results/results.xml', 'utf8');
              // Parse JUnit XML to get test counts
              const testMatch = results.match(/tests="(\d+)"/);
              const failureMatch = results.match(/failures="(\d+)"/);
              const skippedMatch = results.match(/skipped="(\d+)"/);
              
              if (testMatch) {
                const total = testMatch[1];
                const failures = failureMatch ? failureMatch[1] : '0';
                const skipped = skippedMatch ? skippedMatch[1] : '0';
                const passed = total - failures - skipped;
                
                e2eResults = `üîç **E2E Tests**: ${passed}/${total} passed, ${failures} failed, ${skipped} skipped`;
              }
            }
          } catch (e) {
            console.log('Could not read E2E test results:', e);
          }
          
          const comment = `## üöÄ E2E Test Results
          
          ${e2eResults}
          
          üì± **Browsers Tested**: Chrome, Firefox, Safari, Mobile Chrome, Mobile Safari
          
          ---
          *E2E tests completed successfully*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Security and Quality Checks
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Check for outdated dependencies
      run: npm outdated
    
    - name: Run bundle analysis
      run: npm run build
      env:
        ANALYZE: true
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
    
    - name: Upload bundle analysis
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bundle-analysis
        path: .next/analyze/

  # Performance Testing
  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
    
    - name: Start application
      run: npm start &
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
    
    - name: Wait for application to start
      run: npx wait-on http://localhost:3000
    
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
    
    - name: Comment PR with performance results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## ‚ö° Performance Results
          
          üöÄ **Lighthouse CI**: Completed
          üìä **Core Web Vitals**: Analyzed
          üîç **Performance Budget**: Checked
          
          View detailed results in the Lighthouse CI dashboard.
          
          ---
          *Performance testing completed*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Final Status
  status:
    runs-on: ubuntu-latest
    needs: [test, e2e, security, performance]
    if: always()
    
    steps:
    - name: Check job status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.e2e.result }}" == "success" && "${{ needs.security.result }}" == "success" ]]; then
          echo "‚úÖ All tests passed successfully!"
          exit 0
        else
          echo "‚ùå Some tests failed. Check the logs above for details."
          exit 1
        fi
